<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        mediactrl.xml
    Purpose:     wxMediaCtrl class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2011/12/01
    Revision:    $Hash$
    Copyleft:    (É”) Andrea Zanellato
    Licence:     GNU General Public License Version 3
-->
<class name="wxMediaCtrl">
    <description>
        &lt;p&gt;&lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; is a class for displaying types of media, such as videos, audio files, natively through native codecs. &lt;/p&gt;
        &lt;p&gt;&lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; uses native backends to render media, for example on Windows there is a ActiveMovie/DirectShow backend, and on Macintosh there is a QuickTime backend.&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_rendering_media"&gt;&lt;/a&gt;
        Rendering media&lt;/h2&gt;
        &lt;p&gt;Depending upon the backend, &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; can render and display pretty much any kind of media that the native system can - such as an image, mpeg video, or mp3 (without license restrictions - since it relies on native system calls that may not technically have mp3 decoding available, for example, it falls outside the realm of licensing restrictions).&lt;/p&gt;
        &lt;p&gt;For general operation, all you need to do is call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a851c8fa0ba1ea1604d6fa8dabf09dac9" title="Loads the file that fileName refers to."&gt;Load()&lt;/a&gt; to load the file you want to render, catch the &lt;code&gt;EVT_MEDIA_LOADED&lt;/code&gt; event, and then call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a3ed954585927bc8cffc682bcb7db133c" title="Resumes playback of the movie."&gt;Play()&lt;/a&gt; to show the video/audio of the media in that event.&lt;/p&gt;
        &lt;p&gt;More complex operations are generally more heavily dependent on the capabilities of the backend. For example, QuickTime cannot set the playback rate of certain streaming media - while DirectShow is slightly more flexible in that regard.&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_operation"&gt;&lt;/a&gt;
        Operation&lt;/h2&gt;
        &lt;p&gt;When &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; plays a file, it plays until the stop position is reached (currently the end of the file/stream). Right before it hits the end of the stream, it fires off a &lt;code&gt;EVT_MEDIA_STOP&lt;/code&gt; event to its parent window, at which point the event handler can choose to veto the event, preventing the stream from actually stopping.&lt;/p&gt;
        &lt;p&gt;Example:&lt;/p&gt;
        &lt;div class="fragment"&gt;&lt;pre class="fragment"&gt;    &lt;span class="comment"&gt;//connect to the media event&lt;/span&gt;
            this-&gt;&lt;a class="code" href="http://docs.wxwidgets.org/trunk/classwx_evt_handler.html#a78719e8b82c9f9c6e4056b3449df1943" title="Connects the given function dynamically with the event handler, id and event type."&gt;Connect&lt;/a&gt;(wxMY_ID, wxEVT_MEDIA_STOP, (wxObjectEventFunction)
            (wxEventFunction)(wxMediaEventFunction) &amp;MyFrame::OnMediaStop);

            &lt;span class="comment"&gt;//...&lt;/span&gt;
            &lt;span class="keywordtype"&gt;void&lt;/span&gt; MyFrame::OnMediaStop(&lt;span class="keyword"&gt;const&lt;/span&gt; &lt;a class="code" href="http://docs.wxwidgets.org/trunk/classwx_media_event.html" title="Event wxMediaCtrl uses."&gt;wxMediaEvent&lt;/a&gt;&amp; evt)
            {
                &lt;span class="keywordflow"&gt;if&lt;/span&gt;(bUserWantsToSeek)
                {
                    m_mediactrl-&gt;SetPosition(
                        m_mediactrl-&gt;GetDuration() &lt;&lt; 1
                                            );
                    evt.&lt;a class="code" href="http://docs.wxwidgets.org/trunk/classwx_notify_event.html#a49e4502414a11e273f51a34a21d2acd3" title="Prevents the change announced by this event from happening."&gt;Veto&lt;/a&gt;();
                }
            }
        &lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; stops, either by the &lt;code&gt;EVT_MEDIA_STOP&lt;/code&gt; not being vetoed, or by manually calling &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#ad596db9b674e926ec8a1bad97159eb47" title="Stops the media."&gt;Stop()&lt;/a&gt;, where it actually stops is not at the beginning, rather, but at the beginning of the stream. That is, when it stops and play is called, playback is guaranteed to start at the beginning of the media. This is because some streams are not seekable, and when stop is called on them they return to the beginning, thus &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; tries to keep consistent for all types of media.&lt;/p&gt;
        &lt;p&gt;Note that when changing the state of the media through &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a3ed954585927bc8cffc682bcb7db133c" title="Resumes playback of the movie."&gt;Play()&lt;/a&gt; and other methods, the media may not actually be in the &lt;code&gt;wxMEDIASTATE_PLAYING&lt;/code&gt;, for example. If you are relying on the media being in certain state catch the event relevant to the state. See &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_event.html" title="Event wxMediaCtrl uses."&gt;wxMediaEvent&lt;/a&gt; for the kinds of events that you can catch.&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_video_size"&gt;&lt;/a&gt;
        Video size&lt;/h2&gt;
        &lt;p&gt;By default, &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; will scale the size of the video to the requested amount passed to either its constructor or &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#aa68973c94e2462fe1eba48549bde6284" title="Creates this control."&gt;Create()&lt;/a&gt;. After calling &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a851c8fa0ba1ea1604d6fa8dabf09dac9" title="Loads the file that fileName refers to."&gt;wxMediaCtrl::Load&lt;/a&gt; or performing an equivalent operation, you can subsequently obtain the "real" size of the video (if there is any) by calling &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a8f03babae1c8e27f4323fe58c663c454" title="Obtains the best size relative to the original/natural size of the video, if there is any..."&gt;wxMediaCtrl::GetBestSize()&lt;/a&gt;. Note that the actual result on the display will be slightly different when &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#aeb677324f81580e7647c70b332395012" title="A special feature to wxMediaCtrl."&gt;wxMediaCtrl::ShowPlayerControls&lt;/a&gt; is activated and the actual video size will be less than specified due to the extra controls provided by the native toolkit. In addition, the backend may modify &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a8f03babae1c8e27f4323fe58c663c454" title="Obtains the best size relative to the original/natural size of the video, if there is any..."&gt;wxMediaCtrl::GetBestSize()&lt;/a&gt; to include the size of the extra controls - so if you want the real size of the video just disable &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#aeb677324f81580e7647c70b332395012" title="A special feature to wxMediaCtrl."&gt;wxMediaCtrl::ShowPlayerControls()&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;The idea with setting &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a8f03babae1c8e27f4323fe58c663c454" title="Obtains the best size relative to the original/natural size of the video, if there is any..."&gt;wxMediaCtrl::GetBestSize()&lt;/a&gt; to the size of the video is that &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#a8f03babae1c8e27f4323fe58c663c454" title="Obtains the best size relative to the original/natural size of the video, if there is any..."&gt;GetBestSize()&lt;/a&gt; is a wxWindow-derived function that is called when sizers on a window recalculate. What this means is that if you use sizers by default the video will show in its original size without any extra assistance needed from the user.&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_player_controls"&gt;&lt;/a&gt;
        Player controls&lt;/h2&gt;
        &lt;p&gt;Normally, when you use &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; it is just a window for the video to play in. However, some toolkits have their own media player interface. For example, QuickTime generally has a bar below the video with a slider. A special feature available to &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt;, you can use the toolkits interface instead of making your own by using the &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#aeb677324f81580e7647c70b332395012" title="A special feature to wxMediaCtrl."&gt;ShowPlayerControls()&lt;/a&gt; function. There are several options for the flags parameter, with the two general flags being &lt;code&gt;wxMEDIACTRLPLAYERCONTROLS_NONE&lt;/code&gt; which turns off the native interface, and &lt;code&gt;wxMEDIACTRLPLAYERCONTROLS_DEFAULT&lt;/code&gt; which lets &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; decide what native controls on the interface. Be sure to review the caveats outlined in &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#mediactrl_video_size"&gt;Video size&lt;/a&gt; before doing so.&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_choosing_backend"&gt;&lt;/a&gt;
        Choosing a backend&lt;/h2&gt;
        &lt;p&gt;Generally, you should almost certainly leave this part up to &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; - but if you need a certain backend for a particular reason, such as QuickTime for playing .mov files, all you need to do to choose a specific backend is to pass the name of the backend class to &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html#aa68973c94e2462fe1eba48549bde6284" title="Creates this control."&gt;wxMediaCtrl::Create()&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;The following are valid backend identifiers:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;&lt;b&gt;wxMEDIABACKEND_DIRECTSHOW:&lt;/b&gt; Use ActiveMovie/DirectShow. Uses the native ActiveMovie (I.E. DirectShow) control. Default backend on Windows and supported by nearly all Windows versions, even some Windows CE versions. May display a windows media player logo while inactive.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;wxMEDIABACKEND_QUICKTIME:&lt;/b&gt; Use QuickTime. Mac Only. WARNING: May not working correctly embedded in a &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_notebook.html" title="This class represents a notebook control, which manages multiple windows with associated tabs..."&gt;wxNotebook&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;wxMEDIABACKEND_GSTREAMER&lt;/b&gt;, Use GStreamer. Unix Only. Requires GStreamer 0.8 along with at the very least the xvimagesink, xoverlay, and gst-play modules of gstreamer to function. You need the correct modules to play the relevant files, for example the mad module to play mp3s, etc.&lt;/li&gt;
        &lt;li&gt;&lt;b&gt;wxMEDIABACKEND_WMP10&lt;/b&gt;, Uses Windows Media Player 10 (Windows only) - works on mobile machines with Windows Media Player 10 and desktop machines with either Windows Media Player 9 or 10.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;Note that other backends such as wxMEDIABACKEND_MCI can now be found at wxCode (&lt;a href="http://wxcode.sourceforge.net/"&gt;http://wxcode.sourceforge.net/&lt;/a&gt;).&lt;/p&gt;
        &lt;h2&gt;&lt;a class="anchor" id="mediactrl_creating_backend"&gt;&lt;/a&gt;
        Creating a backend&lt;/h2&gt;
        &lt;p&gt;Creating a backend for &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; is a rather simple process. Simply derive from wxMediaBackendCommonBase and implement the methods you want. The methods in wxMediaBackend correspond to those in &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_media_ctrl.html" title="wxMediaCtrl is a class for displaying types of media, such as videos, audio files, natively through native codecs."&gt;wxMediaCtrl&lt;/a&gt; except for wxMediaCtrl::CreateControl which does the actual creation of the control, in cases where a custom control is not needed you may simply call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_control.html#abe23789c94c86907463a0e8434be822a"&gt;wxControl::Create()&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;You need to make sure to use the &lt;code&gt;DECLARE_CLASS&lt;/code&gt; and &lt;code&gt;IMPLEMENT_CLASS&lt;/code&gt; macros.&lt;/p&gt;
        &lt;p&gt;The only real tricky part is that you need to make sure the file in compiled in, which if there are just backends in there will not happen and you may need to use a force link hack (see &lt;a href="http://www.wxwidgets.org/wiki/index.php/RTTI"&gt;http://www.wxwidgets.org/wiki/index.php/RTTI&lt;/a&gt;).&lt;/p&gt;
        &lt;p&gt;This is a rather simple example of how to create a backend in the &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_active_x_container.html" title="wxActiveXContainer is a host for an ActiveX control on Windows (and as such is a platform-specific cl..."&gt;wxActiveXContainer&lt;/a&gt; documentation.&lt;/p&gt;
    </description>
    <inherits>
        <class>wxControl</class>
    </inherits>
    <name label="Name">
        <value>mediaCtrl</value>
    </name>
    <url name="file" label="File">
        <description>Path to the media file.</description>
    </url>
    <bool name="play" label="Play">
        <description>Resumes playback of the movie.</description>
    </bool>
    <double name="playback_rate" label="Playback rate">
        <description>Sets the playback rate, or speed of the media, to that referred by dRate. 1.0 represents normal speed, while 2.0 represents twice the normal speed of the media, for example. Not supported on the GStreamer (Unix) backend.</description>
    </double>
    <double name="volume" label="Volume">
        <description>Sets the volume of the media from a 0.0 to 1.0 range to that referred by dVolume. 1.0 represents full volume, while 0.5 represents half (50 percent) volume, for example. Note: The volume may not be exact due to conversion and rounding errors, although setting the volume to full or none is always exact.</description>
    </double>
    <enum name="wxMediaCtrlPlayerControls">
        <flag name="wxMEDIACTRLPLAYERCONTROLS_NONE">
            <description>No controls. Return wxMediaCtrl to its default state.</description>
        </flag>
        <flag name="wxMEDIACTRLPLAYERCONTROLS_STEP">
            <description>Step controls like fastforward, step one frame etc.</description>
        </flag>
        <flag name="wxMEDIACTRLPLAYERCONTROLS_VOLUME">
            <description>Volume controls like the speaker icon, volume slider, etc.</description>
        </flag>
        <flag name="wxMEDIACTRLPLAYERCONTROLS_DEFAULT">
            <description>Default controls for the toolkit. Currently a combination for wxMEDIACTRLPLAYERCONTROLS_STEP and wxMEDIACTRLPLAYERCONTROLS_VOLUME.</description>
        </flag>
    </enum>
</class>
