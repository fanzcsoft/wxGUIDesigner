<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        wizard.xml
    Purpose:     wxWizard class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2011/12/02
    Revision:    $Hash$
    Copyleft:    (É”) Andrea Zanellato
    Licence:     GNU General Public License Version 3
-->
<classes>
    <class name="wxWizard" type="toplevel">
        <description>
            &lt;p&gt;&lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html" title="wxWizard is the central class for implementing 'wizard-like' dialogs."&gt;wxWizard&lt;/a&gt; is the central class for implementing 'wizard-like' dialogs. &lt;/p&gt;
            &lt;p&gt;These dialogs are mostly familiar to Windows users and are nothing other than a sequence of 'pages', each displayed inside a dialog which has the buttons to navigate to the next (and previous) pages.&lt;/p&gt;
            &lt;p&gt;The wizards are typically used to decompose a complex dialog into several simple steps and are mainly useful to the novice users, hence it is important to keep them as simple as possible.&lt;/p&gt;
            &lt;p&gt;To show a wizard dialog, you must first create an instance of the &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html" title="wxWizard is the central class for implementing 'wizard-like' dialogs."&gt;wxWizard&lt;/a&gt; class using either the non-default constructor or a default one followed by call to the &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html#a9e862edc50c6319c6750f7503f106e79" title="Creates the wizard dialog."&gt;wxWizard::Create&lt;/a&gt; function. Then you should add all pages you want the wizard to show and call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html#ae4ed7afb38e10d782a66a1daba8fa83d" title="Executes the wizard starting from the given page, returning true if it was successfully finished or f..."&gt;wxWizard::RunWizard()&lt;/a&gt;. Finally, don't forget to call &lt;code&gt;"wizard-&gt;Destroy()"&lt;/code&gt;, otherwise your application will hang on exit due to an undestroyed window.&lt;/p&gt;
            &lt;p&gt;You can supply a bitmap to display on the left of the wizard, either for all pages or for individual pages. If you need to have the bitmap resize to the height of the wizard, call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html#a862344eb45f192916e6b6ca83b588eb6" title="Sets the flags indicating how the wizard or page bitmap should be expanded and positioned to fit the ..."&gt;wxWizard::SetBitmapPlacement()&lt;/a&gt; and if necessary, &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html#a7ec9f8483c4c79a76899f61d3719d51d" title="Sets the colour that should be used to fill the area not taken up by the wizard or page bitmap..."&gt;wxWizard::SetBitmapBackgroundColour()&lt;/a&gt; and &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html#aacea5d1dc302604fc757bd1eb89b50f3" title="Sets the minimum width for the bitmap that will be constructed to contain the actual wizard or page b..."&gt;wxWizard::SetMinimumBitmapWidth()&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;To make wizard pages scroll when the display is too small to fit the whole dialog, you can switch layout adaptation on globally with &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_dialog.html#a016cfd686f75bcfc5f7b6f127be74c7c" title="A static function enabling or disabling layout adaptation for all dialogs."&gt;wxDialog::EnableLayoutAdaptation()&lt;/a&gt; or per dialog with &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_dialog.html#a9f949c545ca70571cec8cd2fcbfc0991" title="Sets the adaptation mode, overriding the global adaptation flag."&gt;wxDialog::SetLayoutAdaptationMode()&lt;/a&gt;. For more about layout adaptation, see &lt;a class="el" href="http://docs.wxwidgets.org/trunk/overview_dialog.html#overview_dialog_autoscrolling"&gt;Automatic scrolling dialogs&lt;/a&gt;.&lt;/p&gt;
        </description>
        <inherits>
            <class>wxDialog</class>
        </inherits>
        <children>
            <class name="wxWizardPage"       max="-1"/>
            <class name="wxWizardPageSimple" max="-1"/>
        </children>
        <name>
            <value>m_wizard</value>
        </name>
        <style name="exstyle" label="Extra style">
            <flag name="wxWIZARD_EX_HELPBUTTON">
                <description>Shows a Help button using wxID_HELP.</description>
            </flag>
        </style>
        <bitmap>
            <description>Bitmap to display on the left side of the wizard (default: none).</description>
        </bitmap>
        <event name="wxWizardEvent">
            <description>wxWizardEvent class represents an event generated by the wxWizard: this event is first sent to the page itself and, if not processed there, goes up the window hierarchy as usual.</description>
            <type name="wxEVT_WIZARD_CANCEL">
                <macro_id>EVT_WIZARD_CANCEL</macro_id>
                <description>The user attempted to cancel the wizard (this event may also be vetoed).</description>
            </type>
            <type name="wxEVT_WIZARD_FINISHED">
                <macro_id>EVT_WIZARD_FINISHED</macro_id>
                <description>The wizard finished button was pressed.</description>
            </type>
            <type name="wxEVT_WIZARD_HELP">
                <macro_id>EVT_WIZARD_HELP</macro_id>
                <description>The wizard help button was pressed.</description>
            </type>
            <type name="wxEVT_WIZARD_PAGE_CHANGED">
                <macro_id>EVT_WIZARD_PAGE_CHANGED</macro_id>
                <description>The page has just been changed (this event cannot be vetoed).</description>
            </type>
            <type name="wxEVT_WIZARD_PAGE_CHANGING">
                <macro_id>EVT_WIZARD_PAGE_CHANGING</macro_id>
                <description>The page is being changed (this event can be vetoed).</description>
            </type>
            <type name="wxEVT_WIZARD_PAGE_SHOWN">
                <macro_id>EVT_WIZARD_PAGE_SHOWN</macro_id>
                <description>The page was shown and laid out (this event cannot be vetoed).</description>
            </type>
        </event>
    </class>

    <class name="wxWizardPage" type="abstract">
        <description>
            &lt;p&gt;&lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html" title="wxWizardPage is one of the screens in wxWizard: it must know what are the following and preceding pag..."&gt;wxWizardPage&lt;/a&gt; is one of the screens in &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard.html" title="wxWizard is the central class for implementing 'wizard-like' dialogs."&gt;wxWizard&lt;/a&gt;: it must know what are the following and preceding pages (which may be &lt;span class="literal"&gt;NULL&lt;/span&gt; for the first/last page). &lt;/p&gt;
            &lt;p&gt;Except for this extra knowledge, &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html" title="wxWizardPage is one of the screens in wxWizard: it must know what are the following and preceding pag..."&gt;wxWizardPage&lt;/a&gt; is just a panel, so the controls may be placed directly on it in the usual way.&lt;/p&gt;
            &lt;p&gt;This class allows the programmer to decide the order of pages in the wizard dynamically (during run-time) and so provides maximal flexibility. Usually, however, the order of pages is known in advance in which case &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page_simple.html" title="wxWizardPageSimple is the simplest possible wxWizardPage implementation: it just returns the pointers..."&gt;wxWizardPageSimple&lt;/a&gt; class is enough and it is simpler to use.&lt;/p&gt;
        </description>
        <inherits>
            <class>wxPanel</class>
        </inherits>
        <children>
            <class type="sizer" max="1"/>
            <class type="control" max="-1"/>
        </children>
        <name label="Name">
            <value>wizPage</value>
        </name>
        <bitmap label="Bitmap">
            <description>Page-specific bitmap (default: none).</description>
        </bitmap>
    </class>

    <class name="wxWizardPageSimple">
        <description>
            &lt;p&gt;&lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page_simple.html" title="wxWizardPageSimple is the simplest possible wxWizardPage implementation: it just returns the pointers..."&gt;wxWizardPageSimple&lt;/a&gt; is the simplest possible &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html" title="wxWizardPage is one of the screens in wxWizard: it must know what are the following and preceding pag..."&gt;wxWizardPage&lt;/a&gt; implementation: it just returns the pointers given to its constructor from &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html#a90f7e694f3c8680a751a8240a1538a60" title="Get the page which should be shown when the user chooses the &quot;Next&quot; button: if NULL is returned..."&gt;wxWizardPage::GetNext()&lt;/a&gt; and &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html#ab556984170e62541d15bbe892666bc68" title="Get the page which should be shown when the user chooses the &quot;Back&quot; button: if NULL is returned..."&gt;wxWizardPage::GetPrev()&lt;/a&gt; functions. &lt;/p&gt;
            &lt;p&gt;This makes it very easy to use the objects of this class in the wizards where the pages order is known statically - on the other hand, if this is not the case you must derive your own class from &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_wizard_page.html" title="wxWizardPage is one of the screens in wxWizard: it must know what are the following and preceding pag..."&gt;wxWizardPage&lt;/a&gt; instead.&lt;/p&gt;
        </description>
        <inherits>
            <class>wxWizardPage</class>
        </inherits>
    </class>
</classes>