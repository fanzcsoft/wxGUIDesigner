<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        textctrl.xml
    Purpose:     wxTextCtrl class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2012/01/15
    Revision:    $Hash$
    Copyright:   (c) Andrea Zanellato
    Licence:     wxWindows licence
-->
<class name="wxTextCtrl">
    <description>A text control allows text to be displayed and edited.</description>
    <inherits>
        <class>wxWindow</class>
    </inherits>
    <name label="Name">
        <value>m_textCtrl</value>
    </name>
    <style label="Style">
        <flag name="wxTE_PROCESS_ENTER">
            <description>The control will generate the event wxEVT_COMMAND_TEXT_ENTER (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls).</description>
        </flag>
        <flag name="wxTE_PROCESS_TAB">
            <description>The control will receive wxEVT_CHAR events for TAB pressed - normally, TAB is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard.</description>
        </flag>
        <flag name="wxTE_MULTILINE">
            <description>The text control allows multiple lines. If this style is not specified, line break characters should not be used in the controls value.</description>
        </flag>
        <flag name="wxTE_PASSWORD">
            <description>The text will be echoed as asterisks.</description>
        </flag>
        <flag name="wxTE_READONLY">
            <description>The text will not be user-editable.</description>
        </flag>
        <flag name="wxTE_RICH">
            <description>Use rich text control under Win32, this allows to have more than 64KB of text in the control even under Win9x. This style is ignored under other platforms.</description>
        </flag>
        <flag name="wxTE_RICH2">
            <description>Use rich text control version 2.0 or 3.0 under Win32, this style is ignored under other platforms</description>
        </flag>
        <flag name="wxTE_AUTO_URL">
            <description>Highlight the URLs and generate the wxTextUrlEvents when mouse events occur over them. This style is only supported for wxTE_RICH Win32 and multi-line wxGTK2 text controls.</description>
        </flag>
        <flag name="wxTE_NOHIDESEL">
            <description>By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms.</description>
        </flag>
        <flag name="wxHSCROLL">
            <description>A horizontal scrollbar will be created and used, so that text won't be wrapped. No effect under wxGTK1.</description>
        </flag>
        <flag name="wxTE_NO_VSCROLL">
            <description>For multiline controls only: vertical scrollbar will never be created. This limits the amount of text which can be entered into the control to what can be displayed in it under MSW but not under GTK2. Currently not implemented for the other platforms.</description>
        </flag>
        <flag name="wxTE_LEFT">
            <description>The text in the control will be left-justified (default).</description>
        </flag>
        <flag name="wxTE_CENTRE">
            <description>The text in the control will be centered (currently wxMSW and wxGTK2 only).</description>
        </flag>
        <flag name="wxTE_RIGHT">
            <description>The text in the control will be right-justified (currently wxMSW and wxGTK2 only).</description>
        </flag>
        <flag name="wxTE_DONTWRAP">
            <description>Same as wxHSCROLL style: don't wrap at all, show horizontal scrollbar instead.</description>
        </flag>
        <flag name="wxTE_CHARWRAP">
            <description>Wrap the lines too long to be shown entirely at any position (wxUniv and wxGTK2 only).</description>
        </flag>
        <flag name="wxTE_WORDWRAP">
            <description>Wrap the lines too long to be shown entirely at word boundaries (wxUniv and wxGTK2 only).</description>
        </flag>
        <flag name="wxTE_BESTWRAP">
            <description>Wrap the lines at word boundaries or at any other character if there are words longer than the window width (this is the default).</description>
        </flag>
        <flag name="wxTE_CAPITALIZE">
            <description>On PocketPC and Smartphone, causes the first letter to be capitalized.</description>
        </flag>
    </style>
    <text name="value">
        <description>Initial value of the control (default: empty).</description>
    </text>
    <int name="maxlength">
        <description>Maximum length of the text which can be entered by user (default: unlimited).</description>
    </int>
    <event name="wxCommandEvent">
        <type name="wxEVT_COMMAND_TEXT_UPDATED">
            <macro>EVT_TEXT</macro>
            <description>Respond to a wxEVT_COMMAND_TEXT_UPDATED event, generated when the text changes. Notice that this event will be sent when the text controls contents changes -- whether this is due to user input or comes from the program itself (for example, if wxTextCtrl::SetValue() is called); see wxTextCtrl::ChangeValue() for a function which does not send this event. This event is however not sent during the control creation.</description>
        </type>
        <type name="wxEVT_COMMAND_TEXT_ENTER">
            <macro>EVT_TEXT_ENTER</macro>
            <description>Respond to a wxEVT_COMMAND_TEXT_ENTER event, generated when enter is pressed in a text control which must have wxTE_PROCESS_ENTER style for this event to be generated.</description>
        </type>
        <type name="wxEVT_COMMAND_TEXT_URL">
            <macro>EVT_TEXT_URL</macro>
            <description>A mouse event occurred over an URL in the text control (wxMSW and wxGTK2 only currently).</description>
        </type>
        <type name="wxEVT_COMMAND_TEXT_MAXLEN">
            <macro>EVT_TEXT_MAXLEN</macro>
            <description>This event is generated when the user tries to enter more text into the control than the limit set by wxTextCtrl::SetMaxLength(), see its description.</description>
        </type>
    </event>
</class>