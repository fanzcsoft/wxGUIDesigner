<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        treectrl.xml
    Purpose:     wxTreeCtrl class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2012/01/15
    Revision:    $Hash$
    Copyleft:    (É”) Andrea Zanellato
    Licence:     GNU General Public License Version 3
-->
<class name="wxTreeCtrl">
    <description>
        &lt;p&gt;A tree control presents information as a hierarchy, with items that may be expanded to show further items. &lt;/p&gt;
        &lt;p&gt;Items in a tree control are referenced by &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_item_id.html" title="An opaque reference to a tree item."&gt;wxTreeItemId&lt;/a&gt; handles, which may be tested for validity by calling &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_item_id.html#af1e170fe0fa8dab8c8bfd601267034a6" title="Returns true if this instance is referencing a valid tree item."&gt;wxTreeItemId::IsOk()&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;A similar control with a fully native implementation for GTK+ and OS X as well is &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_data_view_tree_ctrl.html" title="This class is a wxDataViewCtrl which internally uses a wxDataViewTreeStore and forwards most of its A..."&gt;wxDataViewTreeCtrl&lt;/a&gt;.&lt;/p&gt;
        &lt;p&gt;To intercept events from a tree control, use the event table macros described in &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_event.html" title="A tree event holds information about events associated with wxTreeCtrl objects."&gt;wxTreeEvent&lt;/a&gt;.&lt;/p&gt;
    </description>
    <inherits>
        <class>wxControl</class>
    </inherits>
    <children>
        <class max="1">wxImageList</class>
    </children>
    <name label="Name">
        <value>treeCtrl</value>
    </name>
    <style label="Style">
        <flag name="wxTR_EDIT_LABELS">
            <description>Use this style if you wish the user to be able to edit labels in the tree control.</description>
        </flag>
        <flag name="wxTR_NO_BUTTONS">
            <description>For convenience to document that no buttons are to be drawn.</description>
        </flag>
        <flag name="wxTR_HAS_BUTTONS">
            <description>Use this style to show + and - buttons to the left of parent items.</description>
        </flag>
        <flag name="wxTR_TWIST_BUTTONS">
            <description>Selects alternative style of +/- buttons and shows rotating ("twisting") arrows instead. Currently this style is only implemented under Microsoft Windows Vista and later Windows versions and is ignored under the other platforms. Notice that under Vista this style results in the same appearance as used by the tree control in Explorer and other built-in programs and so using it may be preferable to the default style.</description>
        </flag>
        <flag name="wxTR_NO_LINES">
            <description>Use this style to hide vertical level connectors.</description>
        </flag>
        <flag name="wxTR_FULL_ROW_HIGHLIGHT">
            <description>Use this style to have the background colour and the selection highlight extend over the entire horizontal row of the tree control window. (This flag is ignored under Windows unless you specify wxTR_NO_LINES as well.)</description>
        </flag>
        <flag name="wxTR_LINES_AT_ROOT">
            <description>Use this style to show lines between root nodes. Only applicable if wxTR_HIDE_ROOT is set and wxTR_NO_LINES is not set.</description>
        </flag>
        <flag name="wxTR_HIDE_ROOT">
            <description>Use this style to suppress the display of the root node, effectively causing the first-level nodes to appear as a series of root nodes.</description>
        </flag>
        <flag name="wxTR_ROW_LINES">
            <description>Use this style to draw a contrasting border between displayed rows.</description>
        </flag>
        <flag name="wxTR_HAS_VARIABLE_ROW_HEIGHT">
            <description>Use this style to cause row heights to be just big enough to fit the content. If not set, all rows use the largest row height. The default is that this flag is unset. Generic only.</description>
        </flag>
        <flag name="wxTR_SINGLE">
            <description>For convenience to document that only one item may be selected at a time. Selecting another item causes the current selection, if any, to be deselected. This is the default.</description>
        </flag>
        <flag name="wxTR_MULTIPLE">
            <description>Use this style to allow a range of items to be selected. If a second range is selected, the current range, if any, is deselected.</description>
        </flag>
        <flag name="wxTR_DEFAULT_STYLE">
            <description>The set of flags that are closest to the defaults for the native control for a particular toolkit.</description>
        </flag>
    </style>
    <event name="wxTreeEvent">
        <type name="wxEVT_COMMAND_TREE_BEGIN_DRAG">
            <macro_id>EVT_TREE_BEGIN_DRAG</macro_id>
            <description>Begin dragging with the left mouse button. If you want to enable left-dragging you need to intercept this event and explicitly call wxTreeEvent::Allow(), as it's vetoed by default. Processes a wxEVT_COMMAND_TREE_BEGIN_DRAG event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_BEGIN_RDRAG">
            <macro_id>EVT_TREE_BEGIN_RDRAG</macro_id>
            <description>Begin dragging with the right mouse button. If you want to enable right-dragging you need to intercept this event and explicitly call wxTreeEvent::Allow(), as it's vetoed by default. Processes a wxEVT_COMMAND_TREE_BEGIN_RDRAG event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_END_DRAG">
            <macro_id>EVT_TREE_END_DRAG</macro_id>
            <description>End dragging with the left or right mouse button. Processes a wxEVT_COMMAND_TREE_END_DRAG event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT">
            <macro_id>EVT_TREE_BEGIN_LABEL_EDIT</macro_id>
            <description>Begin editing a label. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_END_LABEL_EDIT">
            <macro_id>EVT_TREE_END_LABEL_EDIT</macro_id>
            <description>Finish editing a label. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_TREE_END_LABEL_EDIT event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_DELETE_ITEM">
            <macro_id>EVT_TREE_DELETE_ITEM</macro_id>
            <description>An item was deleted. Processes a wxEVT_COMMAND_TREE_DELETE_ITEM event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_GET_INFO">
            <macro_id>EVT_TREE_GET_INFO</macro_id>
            <description>Request information from the application. Processes a wxEVT_COMMAND_TREE_GET_INFO event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_SET_INFO">
            <macro_id>EVT_TREE_SET_INFO</macro_id>
            <description>Information is being supplied. Processes a wxEVT_COMMAND_TREE_SET_INFO event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_ACTIVATED">
            <macro_id>EVT_TREE_ITEM_ACTIVATED</macro_id>
            <description>The item has been activated, i.e. chosen by double clicking it with mouse or from keyboard. Processes a wxEVT_COMMAND_TREE_ITEM_ACTIVATED event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_COLLAPSED">
            <macro_id>EVT_TREE_ITEM_COLLAPSED</macro_id>
            <description>The item has been collapsed. Processes a wxEVT_COMMAND_TREE_ITEM_COLLAPSED event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_COLLAPSING">
            <macro_id>EVT_TREE_ITEM_COLLAPSING</macro_id>
            <description>The item is being collapsed. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_TREE_ITEM_COLLAPSING event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_EXPANDED">
            <macro_id>EVT_TREE_ITEM_EXPANDED</macro_id>
            <description>The item has been expanded. Processes a wxEVT_COMMAND_TREE_ITEM_EXPANDED event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_EXPANDING">
            <macro_id>EVT_TREE_ITEM_EXPANDING</macro_id>
            <description>The item is being expanded. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_TREE_ITEM_EXPANDING event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK">
            <macro_id>EVT_TREE_ITEM_RIGHT_CLICK</macro_id>
            <description>The user has clicked the item with the right mouse button. Processes a wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK">
            <macro_id>EVT_TREE_ITEM_MIDDLE_CLICK</macro_id>
            <description>The user has clicked the item with the middle mouse button. This is only supported by the generic control. Processes a wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_SEL_CHANGED">
            <macro_id>EVT_TREE_SEL_CHANGED</macro_id>
            <description>Selection has changed. Processes a wxEVT_COMMAND_TREE_SEL_CHANGED event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_SEL_CHANGING">
            <macro_id>EVT_TREE_SEL_CHANGING</macro_id>
            <description>Selection is changing. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_TREE_SEL_CHANGING event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_KEY_DOWN">
            <macro_id>EVT_TREE_KEY_DOWN</macro_id>
            <description>A key has been pressed. Processes a wxEVT_COMMAND_TREE_KEY_DOWN event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP">
            <macro_id>EVT_TREE_ITEM_GETTOOLTIP</macro_id>
            <description>The opportunity to set the item tooltip is being given to the application (call wxTreeEvent::SetToolTip). Windows only. Processes a wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_ITEM_MENU">
            <macro_id>EVT_TREE_ITEM_MENU</macro_id>
            <description>The context menu for the selected item has been requested, either by a right click or by using the menu key. Processes a wxEVT_COMMAND_TREE_ITEM_MENU event type.</description>
        </type>
        <type name="wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK">
            <macro_id>EVT_TREE_STATE_IMAGE_CLICK</macro_id>
            <description>The state image has been clicked. Windows only. Processes a wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK event type.</description>
        </type>
    </event>
</class>