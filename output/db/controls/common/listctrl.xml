<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        listctrl.xml
    Purpose:     wxListCtrl class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2012/01/15
    Revision:    $Hash$
    Copyleft:    (É”) Andrea Zanellato
    Licence:     GNU General Public License Version 3
-->
<classes>
    <class name="wxListCtrl">
        <description>
            &lt;p&gt;A list control presents lists in a number of formats: list view, report view, icon view and small icon view. &lt;/p&gt;
            &lt;p&gt;In any case, elements are numbered from zero. For all these modes, the items are stored in the control and must be added to it using &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#aa65a5ca4e7bd7c0e60a0522a9092a693" title="Inserts an item, returning the index of the new item if successful, -1 otherwise."&gt;wxListCtrl::InsertItem&lt;/a&gt; method.&lt;/p&gt;
            &lt;p&gt;A special case of report view quite different from the other modes of the list control is a virtual control in which the items data (including text, images and attributes) is managed by the main program and is requested by the control itself only when needed which allows to have controls with millions of items without consuming much memory. To use virtual list control you must use &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#a5ded9342e4969eeeb60d1305f75995fd" title="This method can only be used with virtual list controls."&gt;wxListCtrl::SetItemCount&lt;/a&gt; first and override at least &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#a92370967f97215e6068326645ee76624" title="This function must be overridden in the derived class for a control with wxLC_VIRTUAL style..."&gt;wxListCtrl::OnGetItemText&lt;/a&gt; (and optionally &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#a05bd10ebe1ea2a45955dda48045d23a3" title="This function must be overridden in the derived class for a control with wxLC_VIRTUAL style having an..."&gt;wxListCtrl::OnGetItemImage&lt;/a&gt; or &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#ac2650c225e81512af8dcff22ab50a9dc" title="Override this function in the derived class for a control with wxLC_VIRTUAL and wxLC_REPORT styles in..."&gt;wxListCtrl::OnGetItemColumnImage&lt;/a&gt; and &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html#ad8508ae3a3478d778a912581f87cf349" title="This function may be overridden in the derived class for a control with wxLC_VIRTUAL style..."&gt;wxListCtrl::OnGetItemAttr&lt;/a&gt;) to return the information about the items when the control requests it.&lt;/p&gt;
            &lt;p&gt;Virtual list control can be used as a normal one except that no operations which can take time proportional to the number of items in the control happen -- this is required to allow having a practically infinite number of items. For example, in a multiple selection virtual list control, the selections won't be sent when many items are selected at once because this could mean iterating over all the items.&lt;/p&gt;
            &lt;p&gt;Using many of &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html" title="A list control presents lists in a number of formats: list view, report view, icon view and small ico..."&gt;wxListCtrl&lt;/a&gt; features is shown in the &lt;a class="el" href="http://docs.wxwidgets.org/trunk/page_samples.html#page_samples_listctrl"&gt;corresponding sample&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;To intercept events from a list control, use the event table macros described in &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_event.html" title="A list event holds information about events associated with wxListCtrl objects."&gt;wxListEvent&lt;/a&gt;.&lt;/p&gt;
            &lt;p&gt;&lt;b&gt;wxMac Note&lt;/b&gt;: Starting with wxWidgets 2.8, &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html" title="A list control presents lists in a number of formats: list view, report view, icon view and small ico..."&gt;wxListCtrl&lt;/a&gt; uses a native implementation for report mode, and uses a generic implementation for other modes. You can use the generic implementation for report mode as well by setting the &lt;code&gt;mac.listctrl.always_use_generic&lt;/code&gt; system option (see &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_system_options.html" title="wxSystemOptions stores option/value pairs that wxWidgets itself or applications can use to alter beha..."&gt;wxSystemOptions&lt;/a&gt;) to 1.&lt;/p&gt;
        </description>
        <inherits>
            <class>wxControl</class>
        </inherits>
        <children>
            <class>listcol</class>
            <class>listitem</class>
            <class>wxImageList</class>
        </children>
        <name label="Name">
            <value>listCtrl</value>
        </name>
        <style label="Style">
            <flag name="wxLC_LIST">
                <description>Multicolumn list view, with optional small icons. Columns are computed automatically, i.e. you don't set columns as in wxLC_REPORT. In other words, the list wraps, unlike a wxListBox.</description>
            </flag>
            <flag name="wxLC_REPORT">
                <description>Single or multicolumn report view, with optional header.</description>
            </flag>
            <flag name="wxLC_VIRTUAL">
                <description>The application provides items text on demand. May only be used with wxLC_REPORT.</description>
            </flag>
            <flag name="wxLC_ICON">
                <description>Large icon view, with optional labels.</description>
            </flag>
            <flag name="wxLC_SMALL_ICON">
                <description>Small icon view, with optional labels.</description>
            </flag>
            <flag name="wxLC_ALIGN_TOP">
                <description>Icons align to the top. Win32 default, Win32 only.</description>
            </flag>
            <flag name="wxLC_ALIGN_LEFT">
                <description>Icons align to the left.</description>
            </flag>
            <flag name="wxLC_AUTOARRANGE">
                <description>Icons arrange themselves. Win32 only.</description>
            </flag>
            <flag name="wxLC_EDIT_LABELS">
                <description>Labels are editable: the application will be notified when editing starts.</description>
            </flag>
            <flag name="wxLC_NO_HEADER">
                <description>No header in report mode.</description>
            </flag>
            <flag name="wxLC_SINGLE_SEL">
                <description>Single selection (default is multiple).</description>
            </flag>
            <flag name="wxLC_SORT_ASCENDING">
                <description>Sort in ascending order. (You must still supply a comparison callback in wxListCtrl::SortItems.)</description>
            </flag>
            <flag name="wxLC_SORT_DESCENDING">
                <description>Sort in descending order. (You must still supply a comparison callback in wxListCtrl::SortItems.)</description>
            </flag>
            <flag name="wxLC_HRULES">
                <description>Draws light horizontal rules between rows in report mode.</description>
            </flag>
            <flag name="wxLC_VRULES">
                <description>Draws light vertical rules between columns in report mode.</description>
            </flag>
        </style>
        <event name="wxListEvent">
            <type name="wxEVT_COMMAND_LIST_BEGIN_DRAG">
                <macro>EVT_LIST_BEGIN_DRAG</macro>
                <description>Begin dragging with the left mouse button. Processes a wxEVT_COMMAND_LIST_BEGIN_DRAG event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_BEGIN_RDRAG">
                <macro>EVT_LIST_BEGIN_RDRAG</macro>
                <description>Begin dragging with the right mouse button. Processes a wxEVT_COMMAND_LIST_BEGIN_RDRAG event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT">
                <macro>EVT_BEGIN_LABEL_EDIT</macro>
                <description>Begin editing a label. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_END_LABEL_EDIT">
                <macro>EVT_LIST_END_LABEL_EDIT</macro>
                <description>Finish editing a label. This can be prevented by calling Veto(). Processes a wxEVT_COMMAND_LIST_END_LABEL_EDIT event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_DELETE_ITEM">
                <macro>EVT_LIST_DELETE_ITEM</macro>
                <description>An item was deleted. Processes a wxEVT_COMMAND_LIST_DELETE_ITEM event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS">
                <macro>EVT_LIST_DELETE_ALL_ITEMS</macro>
                <description>All items were deleted. Processes a wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_SELECTED">
                <macro>EVT_LIST_ITEM_SELECTED</macro>
                <description>The item has been selected. Processes a wxEVT_COMMAND_LIST_ITEM_SELECTED event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_DESELECTED">
                <macro>EVT_LIST_ITEM_DESELECTED</macro>
                <description>The item has been deselected. Processes a wxEVT_COMMAND_LIST_ITEM_DESELECTED event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_ACTIVATED">
                <macro>EVT_LIST_ITEM_ACTIVATED</macro>
                <description>The item has been activated (ENTER or double click). Processes a wxEVT_COMMAND_LIST_ITEM_ACTIVATED event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_FOCUSED">
                <macro>EVT_LIST_ITEM_FOCUSED</macro>
                <description>The currently focused item has changed. Processes a wxEVT_COMMAND_LIST_ITEM_FOCUSED event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK">
                <macro>EVT_LIST_ITEM_MIDDLE_CLICK</macro>
                <description>The middle mouse button has been clicked on an item. This is only supported by the generic control. Processes a wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK">
                <macro>EVT_LIST_ITEM_RIGHT_CLICK</macro>
                <description>The right mouse button has been clicked on an item. Processes a wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_KEY_DOWN">
                <macro>EVT_LIST_KEY_DOWN</macro>
                <description>A key has been pressed. Processes a wxEVT_COMMAND_LIST_KEY_DOWN event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_INSERT_ITEM">
                <macro>EVT_LIST_INSERT_ITEM</macro>
                <description>An item has been inserted. Processes a wxEVT_COMMAND_LIST_INSERT_ITEM event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_COL_CLICK">
                <macro>EVT_LIST_COL_CLICK</macro>
                <description>A column (m_col) has been left-clicked. Processes a wxEVT_COMMAND_LIST_COL_CLICK event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_COL_RIGHT_CLICK">
                <macro>EVT_LIST_COL_RIGHT_CLICK</macro>
                <description>A column (m_col) has been right-clicked. Processes a wxEVT_COMMAND_LIST_COL_RIGHT_CLICK event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_COL_BEGIN_DRAG">
                <macro>EVT_LIST_COL_BEGIN_DRAG</macro>
                <description>The user started resizing a column - can be vetoed. Processes a wxEVT_COMMAND_LIST_COL_BEGIN_DRAG event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_COL_DRAGGING">
                <macro>EVT_LIST_COL_DRAGGING</macro>
                <description>The divider between columns is being dragged. Processes a wxEVT_COMMAND_LIST_COL_DRAGGING event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_COL_END_DRAG">
                <macro>EVT_LIST_COL_END_DRAG</macro>
                <description>A column has been resized by the user. Processes a wxEVT_COMMAND_LIST_COL_END_DRAG event type.</description>
            </type>
            <type name="wxEVT_COMMAND_LIST_CACHE_HINT">
                <macro>EVT_LIST_CACHE_HINT</macro>
                <description>Prepare cache for a virtual list control. Processes a wxEVT_COMMAND_LIST_CACHE_HINT event type.</description>
            </type>
        </event>
    </class>

    <class name="listcol" type="item">
        <description></description>
        <listcolfmt name="align" label="Align">
            <description>The alignment for the item. Can be one of wxLIST_FORMAT_LEFT, wxLIST_FORMAT_RIGHT or wxLIST_FORMAT_CENTRE.</description>
        </listcolfmt>
        <string name="text" label="Text">
            <description>The title of the column.</description>
        </string>
        <int name="width" label="Width">
            <description>The column width.</description>
        </int>
        <int name="image" label="Image">
            <description>The zero-based index of the image associated with the item in the 'small' image list.</description>
        </int>
    </class>

    <class name="listitem" type="item">
        <description></description>
        <string name="text" label="Text">
            <description>The text label for the item.</description>
        </string>
        <style name="state" label="State">
            <description>The item state. Can be any combination of the following values:</description>
            <flag name="wxLIST_STATE_FOCUSED">
                <description>The item has the focus.</description>
            </flag>
            <flag name="wxLIST_STATE_SELECTED">
                <description>The item is selected.</description>
            </flag>
        </style>
        <font label="Font">
            <description>The font for the item.</description>
        </font>
        <listcolfmt name="align" label="Alignment">
            <description>The alignment for the item. Can be one of wxLIST_FORMAT_LEFT, wxLIST_FORMAT_RIGHT or wxLIST_FORMAT_CENTRE.</description>
        </listcolfmt>
        <colour name="bg" label="Background colour">
            <description>The background color for the item.</description>
        </colour>
        <colour label="Text colour">
            <description>The text colour for the item.</description>
        </colour>
        <bitmap label="Bitmap">
            <description>Add a bitmap to the (normal) wxImageList associated with the wxListCtrl parent and associate it with this item. If the imagelist is not defined it will be created implicitly.</description>
        </bitmap>
        <bitmap name="bitmap-small" label="Bitmap small">
            <description>Add a bitmap in the 'small' wxImageList associated with the wxListCtrl parent and associate it with this item. If the 'small' imagelist is not defined it will be created implicitly.</description>
        </bitmap>
        <int name="image" label="Image">
            <description>The zero-based index of the image associated with the item in the (normal) image list.</description>
        </int>
        <int name="image-small" label="Image small">
            <description>The zero-based index of the image associated with the item in the 'small' image list.</description>
        </int>
        <int name="col" label="Column">
            <description>The zero-based column index.</description>
        </int>
        <int name="data" label="Client data">
            <description>The client data for the item.</description>
        </int>
    </class>
</classes>