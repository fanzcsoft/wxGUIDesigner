<?xml version="1.0" encoding="UTF-8"?>
<!--
    Name:        treelistctrl.xml
    Purpose:     wxTreeListCtrl class definition
    Author:      Andrea Zanellato
    Modified by: 
    Created:     2012/01/24
    Revision:    $Hash$
    Copyleft:    (É”) Andrea Zanellato
    Licence:     GNU General Public License Version 3
-->
<classes>
    <class name="wxTreeListCtrl" type="widget">
        <description>
            &lt;p&gt;A control combining &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_ctrl.html" title="A tree control presents information as a hierarchy, with items that may be expanded to show further i..."&gt;wxTreeCtrl&lt;/a&gt; and &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html" title="A list control presents lists in a number of formats: list view, report view, icon view and small ico..."&gt;wxListCtrl&lt;/a&gt; features. &lt;/p&gt;
            &lt;p&gt;This is a multi-column tree control optionally supporting images and checkboxes for the items in the first column.&lt;/p&gt;
            &lt;p&gt;It is currently implemented using &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_data_view_ctrl.html" title="wxDataViewCtrl is a control to display data either in a tree like fashion or in a tabular form or bot..."&gt;wxDataViewCtrl&lt;/a&gt; internally but provides a much simpler interface for the common use case it addresses. Thus, one of the design principles for this control is simplicity and intentionally doesn't provide all the features of &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_data_view_ctrl.html" title="wxDataViewCtrl is a control to display data either in a tree like fashion or in a tabular form or bot..."&gt;wxDataViewCtrl&lt;/a&gt;. Most importantly, this class stores all its data internally and doesn't require you to define a custom model for it.&lt;/p&gt;
            &lt;p&gt;Instead, this controls works like &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_ctrl.html" title="A tree control presents information as a hierarchy, with items that may be expanded to show further i..."&gt;wxTreeCtrl&lt;/a&gt; or non-virtual &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html" title="A list control presents lists in a number of formats: list view, report view, icon view and small ico..."&gt;wxListCtrl&lt;/a&gt; and allows you to simply add items to it using &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_list_ctrl.html#a35b2d82789812c71ac0a724396ef21ee" title="Adding and removing items."&gt;wxTreeListCtrl::AppendItem()&lt;/a&gt; and related methods. Typically, you start by setting up the columns (you must have at least one) by calling &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_list_ctrl.html#a8464b3bf449606d5da7849be6b0986a5" title="Column methods."&gt;wxTreeListCtrl::AppendColumn()&lt;/a&gt; and then add the items. While only the text of the first column can be specified when adding them, you can use &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_list_ctrl.html#ac99e85e6bd92f49b6260a3cc00c35c08" title="Set the text of the specified column of the given item."&gt;wxTreeListCtrl::SetItemText()&lt;/a&gt; to set the text of the other columns.&lt;/p&gt;
            &lt;p&gt;Unlike &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_ctrl.html" title="A tree control presents information as a hierarchy, with items that may be expanded to show further i..."&gt;wxTreeCtrl&lt;/a&gt; or &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_list_ctrl.html" title="A list control presents lists in a number of formats: list view, report view, icon view and small ico..."&gt;wxListCtrl&lt;/a&gt; this control can sort its items on its own. To allow user to sort the control contents by clicking on some column you should use wxCOL_SORTABLE flag when adding that column to the control. When a column with this flag is clicked, the control resorts itself using the values in this column. By default the sort is done using alphabetical order comparison of the items text, which is not always correct (e.g. this doesn't work for the numeric columns). To change this you may use &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_list_ctrl.html#addcdef889d35ca918f1a0303cc6ef751" title="Set the object to use for comparing the items."&gt;SetItemComparator()&lt;/a&gt; method to provide a custom comparator, i.e. simply an object that implements comparison between the two items. The treelist sample shows an example of doing this. And if you need to sort the control programmatically, you can call &lt;a class="el" href="http://docs.wxwidgets.org/trunk/classwx_tree_list_ctrl.html#af8a7315bd7efcf57971bed41337918a1" title="Sorting."&gt;SetSortColumn()&lt;/a&gt; method.&lt;/p&gt;
            &lt;p&gt;Here are the styles supported by this control. Notice that using wxTL_USER_3STATE implies wxTL_3STATE and wxTL_3STATE in turn implies wxTL_CHECKBOX.&lt;/p&gt;
        </description>
        <value>treeListCtrl</value>
        <inherits>
            <class>wxWindow</class>
        </inherits>
        <children>
            <class>treelistcol</class>
            <class>treelistitem</class>
        </children>
        <style label="Style">
            <flag name="wxTL_DEFAULT_STYLE">
                <description>Style used by the control by default, just wxTL_SINGLE currently.</description>
            </flag>
            <flag name="wxTL_SINGLE">
                <description>Single selection, this is the default.</description>
            </flag>
            <flag name="wxTL_MULTIPLE">
                <description>Allow multiple selection, see GetSelections().</description>
            </flag>
            <flag name="wxTL_CHECKBOX">
                <description>Show the usual, 2 state, checkboxes for the items in the first column.</description>
            </flag>
            <flag name="wxTL_3STATE">
                <description>Show the checkboxes that can possibly be set by the program, but not the user, to a third, undetermined, state, for the items in the first column. Implies wxTL_CHECKBOX.</description>
            </flag>
            <flag name="wxTL_USER_3STATE">
                <description>Same as wxTL_3STATE but the user can also set the checkboxes to the undetermined state. Implies wxTL_3STATE.</description>
            </flag>
        </style>
        <event name="wxTreeListEvent">
            <type name="wxEVT_COMMAND_TREELIST_SELECTION_CHANGED">
                <description>Notifies about the selection change in the control. In the single selection case the item indicated by the event has been selected and previously selected item, if any, was deselected. In multiple selection case, the selection of this item has just changed (it may have been either selected or deselected) but notice that the selection of other items could have changed as well, use wxTreeListCtrl::GetSelections() to retrieve the new selection if necessary.</description>
                <macro>EVT_TREELIST_SELECTION_CHANGED</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_ITEM_EXPANDING">
                <description>Notifies about the given branch being expanded. This event is sent before the expansion occurs and can be vetoed to prevent it from happening.</description>
                <macro>EVT_TREELIST_ITEM_EXPANDING</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_ITEM_EXPANDED">
                <description>Process wxEVT_COMMAND_TREELIST_ITEM_EXPANDED event notifying about the expansion of the given branch. This event is sent after the expansion occurs and can't be vetoed.</description>
                <macro>EVT_TREELIST_ITEM_EXPANDED</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_ITEM_CHECKED">
                <description>The user checking or unchecking the item. You can use wxTreeListCtrl::GetCheckedState() to retrieve the new item state and wxTreeListEvent::GetOldCheckedState() to get the previous one.</description>
                <macro>EVT_TREELIST_ITEM_CHECKED</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_ITEM_ACTIVATED">
                <description>The user double clicking the item or activating it from keyboard.</description>
                <macro>EVT_TREELIST_ITEM_ACTIVATED</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_ITEM_CONTEXT_MENU">
                <description>The popup menu for the given item should be displayed.</description>
                <macro>EVT_TREELIST_ITEM_CONTEXT_MENU</macro>
            </type>
            <type name="wxEVT_COMMAND_TREELIST_COLUMN_SORTED">
                <description>The control contents has just been resorted using the specified column. The event doesn't carry the sort direction, use GetSortColumn() method if you need to know it.</description>
                <macro>EVT_TREELIST_COLUMN_SORTED</macro>
            </type>
        </event>
    </class>

    <class name="treelistcol" type="item">
    </class>

    <class name="treelistitem" type="item">
    </class>
</classes>